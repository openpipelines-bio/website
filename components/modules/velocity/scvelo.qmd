---
title: "Scvelo"
namespace: "Velocity"
description: ""
type: "module"
toc: false
---

::: {.column-margin}

### Info

ID: `scvelo`  
Namespace: `velocity`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/2.1.2/src/velocity/scvelo/config.vsh.yaml){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 2.1.2 -latest \
  -main-script target/nextflow/velocity/scvelo/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
input: # please fill in - example: "path/to/file"
# counts_layer: "foo"
modality: # please fill in - example: "foo"
layer_spliced: "spliced"
layer_unspliced: "unspliced"
layer_ambiguous: "ambiguous"

# Outputs
# output: "$id.$key.output"
# output_h5mu: "$id.$key.output_h5mu"
# output_compression: "gzip"

# Filtering and normalization
# min_counts: 123
# min_counts_u: 123
# min_cells: 123
# min_cells_u: 123
# min_shared_counts: 123
# min_shared_cells: 123
# n_top_genes: 123
log_transform: true

# Fitting parameters
# n_principal_components: 123
n_neighbors: 30

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"

# Arguments
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 2.1.2 -latest \
  -profile docker \
  -main-script target/nextflow/velocity/scvelo/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name                |Description                                            |Attributes                       |
|:----------|:--------------------------------------------------|:--------------------|
|`--input`           |Input MuData file                                      |`file`, required                 |
|`--counts_layer`    |Name of the counts layer, if not specified, X is used. |`string`                         |
|`--modality`        |Input modality                                         |`string`, required               |
|`--layer_spliced`   |                                                       |`string`, default: `"spliced"`   |
|`--layer_unspliced` |                                                       |`string`, default: `"unspliced"` |
|`--layer_ambiguous` |                                                       |`string`, default: `"ambiguous"` |


### Outputs

|Name                   |Description                                                  |Attributes                  |
|:----------|:--------------------------------------------------|:--------------------|
|`--output`             |Output directory. If it does not exist, will be created.     |`file`, required            |
|`--output_h5mu`        |Output mudata file.                                          |`file`, required            |
|`--output_compression` |The compression format to be used on the output h5mu object. |`string`, example: `"gzip"` |


### Filtering and normalization

Arguments for filtering, normalization an log transform (see scvelo.pp.filter_and_normalize function)


|Name                  |Description                                                                    |Attributes                 |
|:----------|:--------------------------------------------------|:--------------------|
|`--min_counts`        |Minimum number of counts required for a gene to pass filtering (spliced).      |`integer`                  |
|`--min_counts_u`      |Minimum number of counts required for a gene to pass filtering (unspliced).    |`integer`                  |
|`--min_cells`         |Minimum number of cells expressed required to pass filtering (spliced).        |`integer`                  |
|`--min_cells_u`       |Minimum number of cells expressed required to pass filtering (unspliced).      |`integer`                  |
|`--min_shared_counts` |Minimum number of counts (both unspliced and spliced) required for a gene.     |`integer`                  |
|`--min_shared_cells`  |Minimum number of cells required to be expressed (both unspliced and spliced). |`integer`                  |
|`--n_top_genes`       |Number of genes to keep.                                                       |`integer`                  |
|`--log_transform`     |Do not log transform counts.                                                   |`boolean`, default: `TRUE` |


### Fitting parameters

Arguments for fitting the data


|Name                       |Description                                                                                                                                                                                 |Attributes               |
|:----------|:--------------------------------------------------|:--------------------|
|`--n_principal_components` |Number of principal components to use for calculating moments.                                                                                                                              |`integer`                |
|`--n_neighbors`            |Number of neighbors to use. First/second-order moments are computed for each cell across its nearest neighbors, where the neighbor graph is obtained from euclidean distances in PCA space. |`integer`, default: `30` |

## Authors


  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (maintainer)

