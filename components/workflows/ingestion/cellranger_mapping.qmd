---
title: "Cell Ranger mapping"
namespace: "Workflows/ingestion"
description: "A pipeline for running Cell Ranger mapping."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `cellranger_mapping`  
Namespace: `workflows/ingestion`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/2.0.1/src/workflows/ingestion/cellranger_mapping/config.vsh.yaml){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 2.0.1 -latest \
  -main-script target/nextflow/workflows/ingestion/cellranger_mapping/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
id: # please fill in - example: "foo"
input: # please fill in - example: ["sample_S1_L001_R1_001.fastq.gz", "sample_S1_L001_R2_001.fastq.gz"]
reference: # please fill in - example: "reference.tar.gz"

# Outputs
# output_raw: "$id.$key.output_raw"
# output_h5mu: "$id.$key.output_h5mu.h5mu"
uns_metrics: "metrics_summary"
output_type: "raw"

# Cell Ranger arguments
# expect_cells: 3000
chemistry: "auto"
secondary_analysis: false
generate_bam: true
include_introns: true

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"

# Arguments
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 2.0.1 -latest \
  -profile docker \
  -main-script target/nextflow/workflows/ingestion/cellranger_mapping/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name          |Description                                                                            |Attributes                                                                                                                   |
|:----------|:--------------------------------------------------|:--------------------|
|`--id`        |ID of the sample.                                                                      |`string`, required, example: `"foo"`                                                                                         |
|`--input`     |The fastq.gz files to align. Can also be a single directory containing fastq.gz files. |List of `file`, required, example: `"sample_S1_L001_R1_001.fastq.gz", "sample_S1_L001_R2_001.fastq.gz"`, multiple_sep: `";"` |
|`--reference` |The path to Cell Ranger reference tar.gz file.                                         |`file`, required, example: `"reference.tar.gz"`                                                                              |


### Outputs

|Name            |Description                                                       |Attributes                                 |
|:----------|:--------------------------------------------------|:--------------------|
|`--output_raw`  |Location where the output folder from Cell Ranger will be stored. |`file`, required, example: `"output_dir"`  |
|`--output_h5mu` |The output from Cell Ranger, converted to h5mu.                   |`file`, required, example: `"output.h5mu"` |
|`--uns_metrics` |Name of the .uns slot under which to QC metrics (if any).         |`string`, default: `"metrics_summary"`     |
|`--output_type` |Which Cell Ranger output to use for converting to h5mu.           |`string`, default: `"raw"`                 |


### Cell Ranger arguments

|Name                   |Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |Attributes                  |
|:----------|:--------------------------------------------------|:--------------------|
|`--expect_cells`       |Expected number of recovered cells, used as input to cell calling algorithm.                                                                                                                                                                                                                                                                                                                                                                                                                                      |`integer`, example: `3000`  |
|`--chemistry`          |Assay configuration. - auto: autodetect mode - threeprime: Single Cell 3' - fiveprime: Single Cell 5' - SC3Pv1: Single Cell 3' v1 - SC3Pv2: Single Cell 3' v2 - SC3Pv3: Single Cell 3' v3 - SC3Pv3LT: Single Cell 3' v3 LT - SC3Pv3HT: Single Cell 3' v3 HT - SC5P-PE: Single Cell 5' paired-end - SC5P-R2: Single Cell 5' R2-only - SC-FB: Single Cell Antibody-only 3' v2 or 5' See https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information. |`string`, default: `"auto"` |
|`--secondary_analysis` |Whether or not to run the secondary analysis e.g. clustering.                                                                                                                                                                                                                                                                                                                                                                                                                                                     |`boolean`, default: `FALSE` |
|`--generate_bam`       |Whether to generate a BAM file.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |`boolean`, default: `TRUE`  |
|`--include_introns`    |Include intronic reads in count (default=true unless --target-panel is specified in which case default=false)                                                                                                                                                                                                                                                                                                                                                                                                     |`boolean`, default: `TRUE`  |

## Authors


  * Angela Oliveira Pisco [{{< fa brands github >}}](https://github.com/aopisco) [{{< fa brands orcid >}}](https://orcid.org/0000-0003-0142-2355) [{{< fa brands linkedin >}}](https://linkedin.com/in/aopisco) (author)

  * Robrecht Cannoodt [{{< fa brands github >}}](https://github.com/rcannood) [{{< fa brands orcid >}}](https://orcid.org/0000-0003-3641-729X) [{{< fa brands linkedin >}}](https://linkedin.com/in/robrechtcannoodt) (author, maintainer)

  * Dries De Maeyer [{{< fa brands github >}}](https://github.com/ddemaeyer) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-de-maeyer-b46a814) (author)

## Visualisation

```{mermaid}
flowchart TB
    v0(Channel.fromList)
    v2(filter)
    v9(filter)
    v17(cellranger_count)
    v24(cross)
    v34(cross)
    v40(filter)
    v48(cellranger_count_split)
    v55(cross)
    v65(cross)
    v71(filter)
    v101(concat)
    v79(from_10xh5_to_h5mu)
    v86(cross)
    v96(cross)
    v108(cross)
    v115(cross)
    v127(cross)
    v134(cross)
    v138(Output)
    v0-->v2
    v2-->v9
    v9-->v17
    v17-->v24
    v9-->v24
    v9-->v34
    v40-->v48
    v48-->v55
    v40-->v55
    v40-->v65
    v71-->v79
    v79-->v86
    v71-->v86
    v71-->v96
    v96-->v101
    v101-->v108
    v2-->v108
    v108-->v115
    v2-->v115
    v2-->v127
    v127-->v134
    v2-->v134
    v134-->v138
    v34-->v40
    v17-->v34
    v65-->v71
    v48-->v65
    v79-->v96
    v101-->v127
    style v0 fill:#e3dcea,stroke:#7a4baa;
    style v2 fill:#e3dcea,stroke:#7a4baa;
    style v9 fill:#e3dcea,stroke:#7a4baa;
    style v17 fill:#e3dcea,stroke:#7a4baa;
    style v24 fill:#e3dcea,stroke:#7a4baa;
    style v34 fill:#e3dcea,stroke:#7a4baa;
    style v40 fill:#e3dcea,stroke:#7a4baa;
    style v48 fill:#e3dcea,stroke:#7a4baa;
    style v55 fill:#e3dcea,stroke:#7a4baa;
    style v65 fill:#e3dcea,stroke:#7a4baa;
    style v71 fill:#e3dcea,stroke:#7a4baa;
    style v101 fill:#e3dcea,stroke:#7a4baa;
    style v79 fill:#e3dcea,stroke:#7a4baa;
    style v86 fill:#e3dcea,stroke:#7a4baa;
    style v96 fill:#e3dcea,stroke:#7a4baa;
    style v108 fill:#e3dcea,stroke:#7a4baa;
    style v115 fill:#e3dcea,stroke:#7a4baa;
    style v127 fill:#e3dcea,stroke:#7a4baa;
    style v134 fill:#e3dcea,stroke:#7a4baa;
    style v138 fill:#e3dcea,stroke:#7a4baa;

```

