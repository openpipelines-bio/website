---
title: "Rna singlesample"
namespace: "Workflows/rna"
description: "Processing unimodal single-sample RNA transcriptomics data."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `rna_singlesample`  
Namespace: `workflows/rna`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/1.0.5/src/workflows/rna/rna_singlesample/config.vsh.yaml){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 1.0.5 -latest \
  -main-script target/nextflow/workflows/rna/rna_singlesample/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Input
id: # please fill in - example: "foo"
input: # please fill in - example: "dataset.h5mu"
# layer: "foo"

# Output
# output: "$id.$key.output.h5mu"

# Filtering options
# min_counts: 200
# max_counts: 5000000
# min_genes_per_cell: 200
# max_genes_per_cell: 1500000
# min_cells_per_gene: 3
# min_fraction_mito: 0.0
# max_fraction_mito: 0.2

# Mitochondrial gene detection
# var_name_mitochondrial_genes: "foo"
# obs_name_mitochondrial_fraction: "foo"
# var_gene_names: "gene_symbol"
mitochondrial_gene_regex: "^[mM][tT]-"

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 1.0.5 -latest \
  -profile docker \
  -main-script target/nextflow/workflows/rna/rna_singlesample/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Input

|Name      |Description                                             |Attributes                                  |
|:----------|:--------------------------------------------------|:--------------------|
|`--id`    |ID of the sample.                                       |`string`, required, example: `"foo"`        |
|`--input` |Path to the sample.                                     |`file`, required, example: `"dataset.h5mu"` |
|`--layer` |Input layer to start from. By default, .X will be used. |`string`                                    |


### Output

|Name       |Description                     |Attributes                                 |
|:----------|:--------------------------------------------------|:--------------------|
|`--output` |Destination path to the output. |`file`, required, example: `"output.h5mu"` |


### Filtering options

|Name                   |Description                                                                                  |Attributes                    |
|:----------|:--------------------------------------------------|:--------------------|
|`--min_counts`         |Minimum number of counts captured per cell.                                                  |`integer`, example: `200`     |
|`--max_counts`         |Maximum number of counts captured per cell.                                                  |`integer`, example: `5000000` |
|`--min_genes_per_cell` |Minimum of non-zero values per cell.                                                         |`integer`, example: `200`     |
|`--max_genes_per_cell` |Maximum of non-zero values per cell.                                                         |`integer`, example: `1500000` |
|`--min_cells_per_gene` |Minimum of non-zero values per gene.                                                         |`integer`, example: `3`       |
|`--min_fraction_mito`  |Minimum fraction of UMIs that are mitochondrial. Requires --obs_name_mitochondrial_fraction. |`double`, example: `0`        |
|`--max_fraction_mito`  |Maximum fraction of UMIs that are mitochondrial. Requires --obs_name_mitochondrial_fraction. |`double`, example: `0.2`      |


### Mitochondrial gene detection

|Name                                |Description                                                                                                                                                                                                                |Attributes                         |
|:----------|:--------------------------------------------------|:--------------------|
|`--var_name_mitochondrial_genes`    |In which .var slot to store a boolean array corresponding the mitochondrial genes.                                                                                                                                         |`string`                           |
|`--obs_name_mitochondrial_fraction` |When specified, write the fraction of counts originating from mitochondrial genes  (based on --mitochondrial_gene_regex) to an .obs column with the specified name. Requires --var_name_mitochondrial_genes.               |`string`                           |
|`--var_gene_names`                  |.var column name to be used to detect mitochondrial genes instead of .var_names (default if not set). Gene names matching with the regex value from --mitochondrial_gene_regex will be identified as a mitochondrial gene. |`string`, example: `"gene_symbol"` |
|`--mitochondrial_gene_regex`        |Regex string that identifies mitochondrial genes from --var_gene_names. By default will detect human and mouse mitochondrial genes from a gene symbol.                                                                     |`string`, default: `"^[mM][tT]-"`  |

## Authors


  * Dries De Maeyer [{{< fa brands github >}}](https://github.com/ddemaeyer) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-de-maeyer-b46a814) (author)

  * Robrecht Cannoodt [{{< fa brands github >}}](https://github.com/rcannood) [{{< fa brands orcid >}}](https://orcid.org/0000-0003-3641-729X) [{{< fa brands linkedin >}}](https://linkedin.com/in/robrechtcannoodt) (author, maintainer)

  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author)

## Visualisation

```{mermaid}
flowchart TB
    v0(Channel.fromList)
    v11(filter)
    v42(mix)
    v97(branch)
    v113(concat)
    v102(delimit_fraction)
    v122(rna_filter_with_counts)
    v142(rna_do_filter)
    v162(filter_with_scrublet)
    v189(Output)
    subgraph group_qc [qc]
        v29(grep_annotation_column)
        v51(calculate_qc_metrics)
        v71(publish)
    end
    v97-->v113
    v97-->v102
    v0-->v11
    v11-->v29
    v29-->v42
    v11-->v42
    v42-->v51
    v51-->v71
    v71-->v97
    v102-->v113
    v113-->v122
    v122-->v142
    v142-->v162
    v162-->v189
    style group_qc fill:#F0F0F0,stroke:#969696;
    style v0 fill:#e3dcea,stroke:#7a4baa;
    style v11 fill:#e3dcea,stroke:#7a4baa;
    style v29 fill:#e3dcea,stroke:#7a4baa;
    style v42 fill:#e3dcea,stroke:#7a4baa;
    style v51 fill:#e3dcea,stroke:#7a4baa;
    style v71 fill:#e3dcea,stroke:#7a4baa;
    style v97 fill:#e3dcea,stroke:#7a4baa;
    style v113 fill:#e3dcea,stroke:#7a4baa;
    style v102 fill:#e3dcea,stroke:#7a4baa;
    style v122 fill:#e3dcea,stroke:#7a4baa;
    style v142 fill:#e3dcea,stroke:#7a4baa;
    style v162 fill:#e3dcea,stroke:#7a4baa;
    style v189 fill:#e3dcea,stroke:#7a4baa;

```

