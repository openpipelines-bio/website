---
title: "Rna singlesample"
namespace: "Workflows/rna"
description: "Processing unimodal single-sample RNA transcriptomics data."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `rna_singlesample`  
Namespace: `workflows/rna`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/2.0.1/src/workflows/rna/rna_singlesample/config.vsh.yaml){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 2.0.1 -latest \
  -main-script target/nextflow/workflows/rna/rna_singlesample/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Input
id: # please fill in - example: "foo"
input: # please fill in - example: "dataset.h5mu"
# layer: "foo"

# Output
# output: "$id.$key.output.h5mu"

# Filtering options
# min_counts: 200
# max_counts: 5000000
# min_genes_per_cell: 200
# max_genes_per_cell: 1500000
# min_cells_per_gene: 3
# min_fraction_mito: 0.0
# max_fraction_mito: 0.2

# Mitochondrial gene detection
# var_name_mitochondrial_genes: "foo"
# obs_name_mitochondrial_fraction: "foo"
# var_gene_names: "gene_symbol"
mitochondrial_gene_regex: "^[mM][tT]-"

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"

# Arguments
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 2.0.1 -latest \
  -profile docker \
  -main-script target/nextflow/workflows/rna/rna_singlesample/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Input

|Name      |Description                                             |Attributes                                  |
|:----------|:--------------------------------------------------|:--------------------|
|`--id`    |ID of the sample.                                       |`string`, required, example: `"foo"`        |
|`--input` |Path to the sample.                                     |`file`, required, example: `"dataset.h5mu"` |
|`--layer` |Input layer to start from. By default, .X will be used. |`string`                                    |


### Output

|Name       |Description                     |Attributes                                 |
|:----------|:--------------------------------------------------|:--------------------|
|`--output` |Destination path to the output. |`file`, required, example: `"output.h5mu"` |


### Filtering options

|Name                   |Description                                                                                  |Attributes                    |
|:----------|:--------------------------------------------------|:--------------------|
|`--min_counts`         |Minimum number of counts captured per cell.                                                  |`integer`, example: `200`     |
|`--max_counts`         |Maximum number of counts captured per cell.                                                  |`integer`, example: `5000000` |
|`--min_genes_per_cell` |Minimum of non-zero values per cell.                                                         |`integer`, example: `200`     |
|`--max_genes_per_cell` |Maximum of non-zero values per cell.                                                         |`integer`, example: `1500000` |
|`--min_cells_per_gene` |Minimum of non-zero values per gene.                                                         |`integer`, example: `3`       |
|`--min_fraction_mito`  |Minimum fraction of UMIs that are mitochondrial. Requires --obs_name_mitochondrial_fraction. |`double`, example: `0`        |
|`--max_fraction_mito`  |Maximum fraction of UMIs that are mitochondrial. Requires --obs_name_mitochondrial_fraction. |`double`, example: `0.2`      |


### Mitochondrial gene detection

|Name                                |Description                                                                                                                                                                                                                |Attributes                         |
|:----------|:--------------------------------------------------|:--------------------|
|`--var_name_mitochondrial_genes`    |In which .var slot to store a boolean array corresponding the mitochondrial genes.                                                                                                                                         |`string`                           |
|`--obs_name_mitochondrial_fraction` |When specified, write the fraction of counts originating from mitochondrial genes  (based on --mitochondrial_gene_regex) to an .obs column with the specified name. Requires --var_name_mitochondrial_genes.               |`string`                           |
|`--var_gene_names`                  |.var column name to be used to detect mitochondrial genes instead of .var_names (default if not set). Gene names matching with the regex value from --mitochondrial_gene_regex will be identified as a mitochondrial gene. |`string`, example: `"gene_symbol"` |
|`--mitochondrial_gene_regex`        |Regex string that identifies mitochondrial genes from --var_gene_names. By default will detect human and mouse mitochondrial genes from a gene symbol.                                                                     |`string`, default: `"^[mM][tT]-"`  |

## Authors


  * Dries De Maeyer [{{< fa brands github >}}](https://github.com/ddemaeyer) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-de-maeyer-b46a814) (author)

  * Robrecht Cannoodt [{{< fa brands github >}}](https://github.com/rcannood) [{{< fa brands orcid >}}](https://orcid.org/0000-0003-3641-729X) [{{< fa brands linkedin >}}](https://linkedin.com/in/robrechtcannoodt) (author, maintainer)

  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author)

## Visualisation

```{mermaid}
flowchart TB
    v0(Channel.fromList)
    v2(filter)
    v11(filter)
    v21(filter)
    v36(cross)
    v46(cross)
    v53(mix)
    v54(filter)
    v69(cross)
    v79(cross)
    v85(filter)
    v115(concat)
    v100(cross)
    v110(cross)
    v122(cross)
    v132(cross)
    v141(branch)
    v168(concat)
    v146(delimit_fraction)
    v153(cross)
    v163(cross)
    v169(filter)
    v177(rna_filter_with_counts)
    v184(cross)
    v194(cross)
    v200(filter)
    v208(rna_do_filter)
    v215(cross)
    v225(cross)
    v231(filter)
    v261(concat)
    v239(filter_with_scrublet)
    v246(cross)
    v256(cross)
    v268(cross)
    v275(cross)
    v287(cross)
    v294(cross)
    v298(Output)
    subgraph group_qc [qc]
        v29(grep_annotation_column)
        v62(calculate_qc_metrics)
        v93(publish)
    end
    v53-->v54
    v141-->v168
    v168-->v169
    v0-->v2
    v2-->v11
    v21-->v29
    v29-->v36
    v21-->v36
    v21-->v46
    v54-->v62
    v62-->v69
    v54-->v69
    v54-->v79
    v85-->v93
    v93-->v100
    v85-->v100
    v85-->v110
    v110-->v115
    v115-->v122
    v11-->v122
    v11-->v132
    v141-->v146
    v146-->v153
    v141-->v153
    v141-->v163
    v163-->v168
    v169-->v177
    v177-->v184
    v169-->v184
    v169-->v194
    v200-->v208
    v208-->v215
    v200-->v215
    v200-->v225
    v231-->v239
    v239-->v246
    v231-->v246
    v231-->v256
    v256-->v261
    v261-->v268
    v2-->v268
    v268-->v275
    v2-->v275
    v2-->v287
    v287-->v294
    v2-->v294
    v294-->v298
    v11-->v21
    v46-->v53
    v29-->v46
    v11-->v53
    v79-->v85
    v62-->v79
    v93-->v110
    v115-->v132
    v132-->v141
    v146-->v163
    v194-->v200
    v177-->v194
    v225-->v231
    v208-->v225
    v239-->v256
    v261-->v287
    style group_qc fill:#F0F0F0,stroke:#969696;
    style v0 fill:#e3dcea,stroke:#7a4baa;
    style v2 fill:#e3dcea,stroke:#7a4baa;
    style v11 fill:#e3dcea,stroke:#7a4baa;
    style v21 fill:#e3dcea,stroke:#7a4baa;
    style v29 fill:#e3dcea,stroke:#7a4baa;
    style v36 fill:#e3dcea,stroke:#7a4baa;
    style v46 fill:#e3dcea,stroke:#7a4baa;
    style v53 fill:#e3dcea,stroke:#7a4baa;
    style v54 fill:#e3dcea,stroke:#7a4baa;
    style v62 fill:#e3dcea,stroke:#7a4baa;
    style v69 fill:#e3dcea,stroke:#7a4baa;
    style v79 fill:#e3dcea,stroke:#7a4baa;
    style v85 fill:#e3dcea,stroke:#7a4baa;
    style v115 fill:#e3dcea,stroke:#7a4baa;
    style v93 fill:#e3dcea,stroke:#7a4baa;
    style v100 fill:#e3dcea,stroke:#7a4baa;
    style v110 fill:#e3dcea,stroke:#7a4baa;
    style v122 fill:#e3dcea,stroke:#7a4baa;
    style v132 fill:#e3dcea,stroke:#7a4baa;
    style v141 fill:#e3dcea,stroke:#7a4baa;
    style v168 fill:#e3dcea,stroke:#7a4baa;
    style v146 fill:#e3dcea,stroke:#7a4baa;
    style v153 fill:#e3dcea,stroke:#7a4baa;
    style v163 fill:#e3dcea,stroke:#7a4baa;
    style v169 fill:#e3dcea,stroke:#7a4baa;
    style v177 fill:#e3dcea,stroke:#7a4baa;
    style v184 fill:#e3dcea,stroke:#7a4baa;
    style v194 fill:#e3dcea,stroke:#7a4baa;
    style v200 fill:#e3dcea,stroke:#7a4baa;
    style v208 fill:#e3dcea,stroke:#7a4baa;
    style v215 fill:#e3dcea,stroke:#7a4baa;
    style v225 fill:#e3dcea,stroke:#7a4baa;
    style v231 fill:#e3dcea,stroke:#7a4baa;
    style v261 fill:#e3dcea,stroke:#7a4baa;
    style v239 fill:#e3dcea,stroke:#7a4baa;
    style v246 fill:#e3dcea,stroke:#7a4baa;
    style v256 fill:#e3dcea,stroke:#7a4baa;
    style v268 fill:#e3dcea,stroke:#7a4baa;
    style v275 fill:#e3dcea,stroke:#7a4baa;
    style v287 fill:#e3dcea,stroke:#7a4baa;
    style v294 fill:#e3dcea,stroke:#7a4baa;
    style v298 fill:#e3dcea,stroke:#7a4baa;

```

