---
title: "Process samples"
namespace: "Workflows/multiomics"
description: "A pipeline to analyse multiple multiomics samples."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `process_samples`  
Namespace: `workflows/multiomics`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/2.0.1/src/workflows/multiomics/process_samples/config.vsh.yaml){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 2.0.1 -latest \
  -main-script target/nextflow/workflows/multiomics/process_samples/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
id: # please fill in - example: "foo"
input: # please fill in - example: "input.h5mu"
# rna_layer: "foo"
# prot_layer: "foo"
# gdo_layer: "foo"

# Outputs
# output: "$id.$key.output.h5mu"

# Sample ID options
add_id_to_obs: true
add_id_obs_output: "sample_id"
add_id_make_observation_keys_unique: true

# RNA filtering options
# rna_min_counts: 200
# rna_max_counts: 5000000
# rna_min_genes_per_cell: 200
# rna_max_genes_per_cell: 1500000
# rna_min_cells_per_gene: 3
# rna_min_fraction_mito: 0.0
# rna_max_fraction_mito: 0.2

# CITE-seq filtering options
# prot_min_counts: 3
# prot_max_counts: 5000000
# prot_min_proteins_per_cell: 200
# prot_max_proteins_per_cell: 100000000
# prot_min_cells_per_protein: 3

# GDO filtering options
# gdo_min_counts: 3
# gdo_max_counts: 5000000
# gdo_min_guides_per_cell: 200
# gdo_max_guides_per_cell: 100000000
# gdo_min_cells_per_guide: 3

# Highly variable features detection
highly_variable_features_var_output: "filter_with_hvg"
highly_variable_features_obs_batch_key: "sample_id"

# Mitochondrial Gene Detection
# var_name_mitochondrial_genes: "foo"
# obs_name_mitochondrial_fraction: "foo"
# var_gene_names: "gene_symbol"
mitochondrial_gene_regex: "^[mM][tT]-"

# QC metrics calculation options
# var_qc_metrics: ["ercc,highly_variable"]
top_n_vars: [50, 100, 200, 500]

# PCA options
pca_overwrite: false

# CLR options
clr_axis: 0

# RNA Scaling options
rna_enable_scaling: false
rna_scaling_output_layer: "scaled"
rna_scaling_pca_obsm_output: "scaled_pca"
rna_scaling_pca_loadings_varm_output: "scaled_pca_loadings"
rna_scaling_pca_variance_uns_output: "scaled_pca_variance"
rna_scaling_umap_obsm_output: "scaled_umap"
# rna_scaling_max_value: 123.0
rna_scaling_zero_center: true

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"

# Arguments
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 2.0.1 -latest \
  -profile docker \
  -main-script target/nextflow/workflows/multiomics/process_samples/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name           |Description                                                                                 |Attributes                                |
|:----------|:--------------------------------------------------|:--------------------|
|`--id`         |ID of the sample.                                                                           |`string`, required, example: `"foo"`      |
|`--input`      |Path to the sample.                                                                         |`file`, required, example: `"input.h5mu"` |
|`--rna_layer`  |Input layer for the gene expression modality. If not specified, .X is used.                 |`string`                                  |
|`--prot_layer` |Input layer for the antibody capture modality. If not specified, .X is used.                |`string`                                  |
|`--gdo_layer`  |Input layer for the guide-derived oligonucleotide (GDO) data. If not specified, .X is used. |`string`                                  |


### Outputs

|Name       |Description                     |Attributes                                 |
|:----------|:--------------------------------------------------|:--------------------|
|`--output` |Destination path to the output. |`file`, required, example: `"output.h5mu"` |


### Sample ID options

Options for adding the id to .obs on the MuData object. Having a sample 
id present in a requirement of several components for this pipeline.



|Name                                    |Description                                                                                         |Attributes                       |
|:----------|:--------------------------------------------------|:--------------------|
|`--add_id_to_obs`                       |Add the value passed with --id to .obs.                                                             |`boolean`, default: `TRUE`       |
|`--add_id_obs_output`                   |.Obs column to add the sample IDs to. Required and only used when  --add_id_to_obs is set to 'true' |`string`, default: `"sample_id"` |
|`--add_id_make_observation_keys_unique` |Join the id to the .obs index (.obs_names).  Only used when --add_id_to_obs is set to 'true'.       |`boolean`, default: `TRUE`       |


### RNA filtering options

|Name                       |Description                                      |Attributes                    |
|:----------|:--------------------------------------------------|:--------------------|
|`--rna_min_counts`         |Minimum number of counts captured per cell.      |`integer`, example: `200`     |
|`--rna_max_counts`         |Maximum number of counts captured per cell.      |`integer`, example: `5000000` |
|`--rna_min_genes_per_cell` |Minimum of non-zero values per cell.             |`integer`, example: `200`     |
|`--rna_max_genes_per_cell` |Maximum of non-zero values per cell.             |`integer`, example: `1500000` |
|`--rna_min_cells_per_gene` |Minimum of non-zero values per gene.             |`integer`, example: `3`       |
|`--rna_min_fraction_mito`  |Minimum fraction of UMIs that are mitochondrial. |`double`, example: `0`        |
|`--rna_max_fraction_mito`  |Maximum fraction of UMIs that are mitochondrial. |`double`, example: `0.2`      |


### CITE-seq filtering options

|Name                           |Description                             |Attributes                      |
|:----------|:--------------------------------------------------|:--------------------|
|`--prot_min_counts`            |Minimum number of counts per cell.      |`integer`, example: `3`         |
|`--prot_max_counts`            |Minimum number of counts per cell.      |`integer`, example: `5000000`   |
|`--prot_min_proteins_per_cell` |Minimum of non-zero values per cell.    |`integer`, example: `200`       |
|`--prot_max_proteins_per_cell` |Maximum of non-zero values per cell.    |`integer`, example: `100000000` |
|`--prot_min_cells_per_protein` |Minimum of non-zero values per protein. |`integer`, example: `3`         |


### GDO filtering options

|Name                        |Description                           |Attributes                      |
|:----------|:--------------------------------------------------|:--------------------|
|`--gdo_min_counts`          |Minimum number of counts per cell.    |`integer`, example: `3`         |
|`--gdo_max_counts`          |Minimum number of counts per cell.    |`integer`, example: `5000000`   |
|`--gdo_min_guides_per_cell` |Minimum of non-zero values per cell.  |`integer`, example: `200`       |
|`--gdo_max_guides_per_cell` |Maximum of non-zero values per cell.  |`integer`, example: `100000000` |
|`--gdo_min_cells_per_guide` |Minimum of non-zero values per guide. |`integer`, example: `3`         |


### Highly variable features detection

|Name                                       |Description                                                                                                                                                                                                    |Attributes                             |
|:----------|:--------------------------------------------------|:--------------------|
|`--highly_variable_features_var_output`    |In which .var slot to store a boolean array corresponding to the highly variable genes.                                                                                                                        |`string`, default: `"filter_with_hvg"` |
|`--highly_variable_features_obs_batch_key` |If specified, highly-variable genes are selected within each batch separately and merged. This simple  process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. |`string`, default: `"sample_id"`       |


### Mitochondrial Gene Detection

|Name                                |Description                                                                                                                                                                                                                |Attributes                         |
|:----------|:--------------------------------------------------|:--------------------|
|`--var_name_mitochondrial_genes`    |In which .var slot to store a boolean array corresponding the mitochondrial genes.                                                                                                                                         |`string`                           |
|`--obs_name_mitochondrial_fraction` |When specified, write the fraction of counts originating from mitochondrial genes  (based on --mitochondrial_gene_regex) to an .obs column with the specified name. Requires --var_name_mitochondrial_genes.               |`string`                           |
|`--var_gene_names`                  |.var column name to be used to detect mitochondrial genes instead of .var_names (default if not set). Gene names matching with the regex value from --mitochondrial_gene_regex will be identified as a mitochondrial gene. |`string`, example: `"gene_symbol"` |
|`--mitochondrial_gene_regex`        |Regex string that identifies mitochondrial genes from --var_gene_names. By default will detect human and mouse mitochondrial genes from a gene symbol.                                                                     |`string`, default: `"^[mM][tT]-"`  |


### QC metrics calculation options

|Name               |Description                                                                                                                                                                                                                                                                                                                                            |Attributes                                                               |
|:----------|:--------------------------------------------------|:--------------------|
|`--var_qc_metrics` |Keys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled 'True',  compared to the total sum of the values for all genes. Defaults to the combined values specified for --var_name_mitochondrial_genes and --highly_variable_features_var_output. |List of `string`, example: `"ercc,highly_variable"`, multiple_sep: `","` |
|`--top_n_vars`     |Number of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. `--top_n_vars 20,50` finds cumulative proportion to the 20th and 50th most expressed vars.                                                                                                                                        |List of `integer`, default: `50, 100, 200, 500`, multiple_sep: `","`     |


### PCA options

|Name              |Description                             |Attributes     |
|:----------|:--------------------------------------------------|:--------------------|
|`--pca_overwrite` |Allow overwriting slots for PCA output. |`boolean_true` |


### CLR options

|Name         |Description                                |Attributes              |
|:----------|:--------------------------------------------------|:--------------------|
|`--clr_axis` |Axis to perform the CLR transformation on. |`integer`, default: `0` |


### RNA Scaling options

Options for enabling scaling of the log-normalized data to unit variance and zero mean.
The scaled data will be output a different layer and representation with reduced dimensions
will be created and stored in addition to the non-scaled data.



|Name                                     |Description                                                                                                                                                  |Attributes                                 |
|:----------|:--------------------------------------------------|:--------------------|
|`--rna_enable_scaling`                   |Enable scaling for the RNA modality.                                                                                                                         |`boolean_true`                             |
|`--rna_scaling_output_layer`             |Output layer where the scaled log-normalized data will be stored.                                                                                            |`string`, default: `"scaled"`              |
|`--rna_scaling_pca_obsm_output`          |Name of the .obsm key where the PCA representation of the log-normalized and scaled data is stored.                                                          |`string`, default: `"scaled_pca"`          |
|`--rna_scaling_pca_loadings_varm_output` |Name of the .varm key where the PCA loadings of the log-normalized and scaled data is stored.                                                                |`string`, default: `"scaled_pca_loadings"` |
|`--rna_scaling_pca_variance_uns_output`  |Name of the .uns key where the variance and variance ratio will be stored as a map. The map will contain two keys: variance and variance_ratio respectively. |`string`, default: `"scaled_pca_variance"` |
|`--rna_scaling_umap_obsm_output`         |Name of the .obsm key where the UMAP representation of the log-normalized and scaled data is stored.                                                         |`string`, default: `"scaled_umap"`         |
|`--rna_scaling_max_value`                |Clip (truncate) data to this value after scaling. If not specified, do not clip.                                                                             |`double`                                   |
|`--rna_scaling_zero_center`              |If set, omit zero-centering variables, which allows to handle sparse input efficiently."                                                                     |`boolean_false`                            |

## Authors


  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author, maintainer)

## Visualisation

```{mermaid}
flowchart TB
    v0(Channel.fromList)
    v2(filter)
    v15(filter)
    v20(add_id)
    v27(cross)
    v37(cross)
    v43(filter)
    v54(filter)
    v66(cross)
    v76(cross)
    v86(concat)
    v93(cross)
    v103(cross)
    v109(flatMap)
    v115(filter)
    v124(filter)
    v134(filter)
    v149(cross)
    v159(cross)
    v166(mix)
    v167(filter)
    v182(cross)
    v192(cross)
    v198(filter)
    v228(concat)
    v213(cross)
    v223(cross)
    v235(cross)
    v245(cross)
    v254(branch)
    v281(concat)
    v266(cross)
    v276(cross)
    v282(filter)
    v297(cross)
    v307(cross)
    v313(filter)
    v328(cross)
    v338(cross)
    v344(filter)
    v374(concat)
    v359(cross)
    v369(cross)
    v381(cross)
    v391(cross)
    v593(mix)
    v402(filter)
    v410(filter)
    v425(cross)
    v435(cross)
    v441(filter)
    v471(concat)
    v456(cross)
    v466(cross)
    v478(cross)
    v488(cross)
    v499(filter)
    v507(filter)
    v522(cross)
    v532(cross)
    v538(filter)
    v568(concat)
    v553(cross)
    v563(cross)
    v575(cross)
    v585(cross)
    v595(mix)
    v602(filter)
    v610(concatenate_h5mu)
    v617(cross)
    v627(cross)
    v636(filter)
    v1689(concat)
    v645(filter)
    v656(filter)
    v668(cross)
    v678(cross)
    v688(concat)
    v695(cross)
    v705(cross)
    v711(flatMap)
    v719(filter)
    v727(filter)
    v742(cross)
    v752(cross)
    v758(filter)
    v773(cross)
    v783(cross)
    v789(filter)
    v804(cross)
    v814(cross)
    v823(branch)
    v850(concat)
    v835(cross)
    v845(cross)
    v851(filter)
    v866(cross)
    v876(cross)
    v882(filter)
    v1008(concat)
    v892(filter)
    v907(cross)
    v917(cross)
    v924(mix)
    v925(filter)
    v940(cross)
    v950(cross)
    v956(filter)
    v986(concat)
    v971(cross)
    v981(cross)
    v993(cross)
    v1003(cross)
    v1015(cross)
    v1025(cross)
    v1226(mix)
    v1036(filter)
    v1044(filter)
    v1059(cross)
    v1069(cross)
    v1075(filter)
    v1201(concat)
    v1085(filter)
    v1100(cross)
    v1110(cross)
    v1117(mix)
    v1118(filter)
    v1133(cross)
    v1143(cross)
    v1149(filter)
    v1179(concat)
    v1164(cross)
    v1174(cross)
    v1186(cross)
    v1196(cross)
    v1208(cross)
    v1218(cross)
    v1228(mix)
    v1236(filter)
    v1251(cross)
    v1261(cross)
    v1271(branch)
    v1390(concat)
    v1276(filter)
    v1291(cross)
    v1301(cross)
    v1307(filter)
    v1322(cross)
    v1332(cross)
    v1338(filter)
    v1368(concat)
    v1353(cross)
    v1363(cross)
    v1375(cross)
    v1385(cross)
    v1394(branch)
    v1513(concat)
    v1399(filter)
    v1414(cross)
    v1424(cross)
    v1430(filter)
    v1445(cross)
    v1455(cross)
    v1461(filter)
    v1491(concat)
    v1476(cross)
    v1486(cross)
    v1498(cross)
    v1508(cross)
    v1517(branch)
    v1636(concat)
    v1522(filter)
    v1537(cross)
    v1547(cross)
    v1553(filter)
    v1568(cross)
    v1578(cross)
    v1584(filter)
    v1614(concat)
    v1599(cross)
    v1609(cross)
    v1621(cross)
    v1631(cross)
    v1637(filter)
    v1667(concat)
    v1652(cross)
    v1662(cross)
    v1674(cross)
    v1684(cross)
    v1696(cross)
    v1703(cross)
    v1715(cross)
    v1722(cross)
    v1726(Output)
    subgraph group_split_modalities_workflow [split_modalities_workflow]
        v59(split_modalities_component)
    end
    subgraph group_rna_singlesample [rna_singlesample]
        v142(grep_annotation_column)
        v175(calculate_qc_metrics)
        v206(publish)
        v259(delimit_fraction)
        v290(rna_filter_with_counts)
        v321(rna_do_filter)
        v352(filter_with_scrublet)
    end
    subgraph group_prot_singlesample [prot_singlesample]
        v418(prot_filter_with_counts)
        v449(prot_do_filter)
    end
    subgraph group_gdo_singlesample [gdo_singlesample]
        v515(gdo_filter_with_counts)
        v546(gdo_do_filter)
    end
    subgraph group_process_batches [process_batches]
        v661(split_modalities_component)
        v1244(merge)
        v1284(pca)
        v1315(find_neighbors)
        v1346(umap)
        v1407(pca)
        v1438(find_neighbors)
        v1469(umap)
        v1530(pca)
        v1561(find_neighbors)
        v1592(umap)
        v1645(publish)
        subgraph group_rna_multisample [rna_multisample]
            v735(normalize_total)
            v766(log1p)
            v797(delete_layer)
            v828(scale)
            v859(highly_variable_features_scanpy)
            v900(grep_annotation_column)
            v933(calculate_qc_metrics)
            v964(publish)
        end
        subgraph group_prot_multisample [prot_multisample]
            v1052(clr)
            v1093(grep_annotation_column)
            v1126(calculate_qc_metrics)
            v1157(publish)
        end
    end
    v166-->v167
    v254-->v281
    v281-->v282
    v593-->v595
    v823-->v850
    v850-->v851
    v924-->v925
    v1117-->v1118
    v1226-->v1228
    v1271-->v1390
    v1394-->v1513
    v1517-->v1636
    v1636-->v1637
    v0-->v2
    v15-->v20
    v20-->v27
    v15-->v27
    v15-->v37
    v54-->v59
    v59-->v66
    v54-->v66
    v54-->v76
    v86-->v93
    v43-->v93
    v43-->v103
    v115-->v124
    v134-->v142
    v142-->v149
    v134-->v149
    v134-->v159
    v167-->v175
    v175-->v182
    v167-->v182
    v167-->v192
    v198-->v206
    v206-->v213
    v198-->v213
    v198-->v223
    v223-->v228
    v228-->v235
    v124-->v235
    v124-->v245
    v254-->v259
    v259-->v266
    v254-->v266
    v254-->v276
    v276-->v281
    v282-->v290
    v290-->v297
    v282-->v297
    v282-->v307
    v313-->v321
    v321-->v328
    v313-->v328
    v313-->v338
    v344-->v352
    v352-->v359
    v344-->v359
    v344-->v369
    v369-->v374
    v374-->v381
    v115-->v381
    v115-->v391
    v402-->v410
    v410-->v418
    v418-->v425
    v410-->v425
    v410-->v435
    v441-->v449
    v449-->v456
    v441-->v456
    v441-->v466
    v466-->v471
    v471-->v478
    v402-->v478
    v402-->v488
    v499-->v507
    v507-->v515
    v515-->v522
    v507-->v522
    v507-->v532
    v538-->v546
    v546-->v553
    v538-->v553
    v538-->v563
    v563-->v568
    v568-->v575
    v499-->v575
    v499-->v585
    v602-->v610
    v610-->v617
    v602-->v617
    v602-->v627
    v656-->v661
    v661-->v668
    v656-->v668
    v656-->v678
    v688-->v695
    v645-->v695
    v645-->v705
    v719-->v727
    v727-->v735
    v735-->v742
    v727-->v742
    v727-->v752
    v758-->v766
    v766-->v773
    v758-->v773
    v758-->v783
    v789-->v797
    v797-->v804
    v789-->v804
    v789-->v814
    v823-->v828
    v828-->v835
    v823-->v835
    v823-->v845
    v845-->v850
    v851-->v859
    v859-->v866
    v851-->v866
    v851-->v876
    v892-->v900
    v900-->v907
    v892-->v907
    v892-->v917
    v925-->v933
    v933-->v940
    v925-->v940
    v925-->v950
    v956-->v964
    v964-->v971
    v956-->v971
    v956-->v981
    v981-->v986
    v986-->v993
    v882-->v993
    v882-->v1003
    v1003-->v1008
    v1008-->v1015
    v719-->v1015
    v719-->v1025
    v1036-->v1044
    v1044-->v1052
    v1052-->v1059
    v1044-->v1059
    v1044-->v1069
    v1085-->v1093
    v1093-->v1100
    v1085-->v1100
    v1085-->v1110
    v1118-->v1126
    v1126-->v1133
    v1118-->v1133
    v1118-->v1143
    v1149-->v1157
    v1157-->v1164
    v1149-->v1164
    v1149-->v1174
    v1174-->v1179
    v1179-->v1186
    v1075-->v1186
    v1075-->v1196
    v1196-->v1201
    v1201-->v1208
    v1036-->v1208
    v1036-->v1218
    v1236-->v1244
    v1244-->v1251
    v1236-->v1251
    v1236-->v1261
    v1271-->v1276
    v1276-->v1284
    v1284-->v1291
    v1276-->v1291
    v1276-->v1301
    v1307-->v1315
    v1315-->v1322
    v1307-->v1322
    v1307-->v1332
    v1338-->v1346
    v1346-->v1353
    v1338-->v1353
    v1338-->v1363
    v1363-->v1368
    v1368-->v1375
    v1271-->v1375
    v1271-->v1385
    v1385-->v1390
    v1394-->v1399
    v1399-->v1407
    v1407-->v1414
    v1399-->v1414
    v1399-->v1424
    v1430-->v1438
    v1438-->v1445
    v1430-->v1445
    v1430-->v1455
    v1461-->v1469
    v1469-->v1476
    v1461-->v1476
    v1461-->v1486
    v1486-->v1491
    v1491-->v1498
    v1394-->v1498
    v1394-->v1508
    v1508-->v1513
    v1517-->v1522
    v1522-->v1530
    v1530-->v1537
    v1522-->v1537
    v1522-->v1547
    v1553-->v1561
    v1561-->v1568
    v1553-->v1568
    v1553-->v1578
    v1584-->v1592
    v1592-->v1599
    v1584-->v1599
    v1584-->v1609
    v1609-->v1614
    v1614-->v1621
    v1517-->v1621
    v1517-->v1631
    v1631-->v1636
    v1637-->v1645
    v1645-->v1652
    v1637-->v1652
    v1637-->v1662
    v1662-->v1667
    v1667-->v1674
    v636-->v1674
    v636-->v1684
    v1684-->v1689
    v1689-->v1696
    v2-->v1696
    v1696-->v1703
    v2-->v1703
    v2-->v1715
    v1715-->v1722
    v2-->v1722
    v1722-->v1726
    v2-->v15
    v37-->v43
    v20-->v37
    v103-->v109
    v43-->v54
    v76-->v86
    v59-->v76
    v86-->v103
    v109-->v115
    v391-->v593
    v124-->v134
    v159-->v166
    v142-->v159
    v124-->v166
    v192-->v198
    v175-->v192
    v206-->v223
    v228-->v245
    v245-->v254
    v259-->v276
    v307-->v313
    v290-->v307
    v338-->v344
    v321-->v338
    v352-->v369
    v374-->v391
    v109-->v402
    v488-->v593
    v435-->v441
    v418-->v435
    v449-->v466
    v471-->v488
    v109-->v499
    v585-->v593
    v532-->v538
    v515-->v532
    v546-->v563
    v568-->v585
    v109-->v595
    v595-->v602
    v610-->v627
    v627-->v636
    v636-->v645
    v705-->v711
    v645-->v656
    v678-->v688
    v661-->v678
    v688-->v705
    v711-->v719
    v1025-->v1226
    v752-->v758
    v735-->v752
    v783-->v789
    v766-->v783
    v797-->v814
    v814-->v823
    v828-->v845
    v876-->v882
    v859-->v876
    v882-->v892
    v917-->v924
    v900-->v917
    v882-->v924
    v950-->v956
    v933-->v950
    v964-->v981
    v986-->v1003
    v1008-->v1025
    v711-->v1036
    v1218-->v1226
    v1069-->v1075
    v1052-->v1069
    v1075-->v1085
    v1110-->v1117
    v1093-->v1110
    v1075-->v1117
    v1143-->v1149
    v1126-->v1143
    v1157-->v1174
    v1179-->v1196
    v1201-->v1218
    v711-->v1228
    v1228-->v1236
    v1244-->v1261
    v1261-->v1271
    v1301-->v1307
    v1284-->v1301
    v1332-->v1338
    v1315-->v1332
    v1346-->v1363
    v1368-->v1385
    v1390-->v1394
    v1424-->v1430
    v1407-->v1424
    v1455-->v1461
    v1438-->v1455
    v1469-->v1486
    v1491-->v1508
    v1513-->v1517
    v1547-->v1553
    v1530-->v1547
    v1578-->v1584
    v1561-->v1578
    v1592-->v1609
    v1614-->v1631
    v1645-->v1662
    v1667-->v1684
    v1689-->v1715
    style group_split_modalities_workflow fill:#F0F0F0,stroke:#969696;
    style group_rna_singlesample fill:#F0F0F0,stroke:#969696;
    style group_prot_singlesample fill:#F0F0F0,stroke:#969696;
    style group_gdo_singlesample fill:#F0F0F0,stroke:#969696;
    style group_process_batches fill:#F0F0F0,stroke:#969696;
    style group_rna_multisample fill:#D9D9D9,stroke:#737373;
    style group_prot_multisample fill:#D9D9D9,stroke:#737373;
    style v0 fill:#e3dcea,stroke:#7a4baa;
    style v2 fill:#e3dcea,stroke:#7a4baa;
    style v15 fill:#e3dcea,stroke:#7a4baa;
    style v20 fill:#e3dcea,stroke:#7a4baa;
    style v27 fill:#e3dcea,stroke:#7a4baa;
    style v37 fill:#e3dcea,stroke:#7a4baa;
    style v43 fill:#e3dcea,stroke:#7a4baa;
    style v54 fill:#e3dcea,stroke:#7a4baa;
    style v59 fill:#e3dcea,stroke:#7a4baa;
    style v66 fill:#e3dcea,stroke:#7a4baa;
    style v76 fill:#e3dcea,stroke:#7a4baa;
    style v86 fill:#e3dcea,stroke:#7a4baa;
    style v93 fill:#e3dcea,stroke:#7a4baa;
    style v103 fill:#e3dcea,stroke:#7a4baa;
    style v109 fill:#e3dcea,stroke:#7a4baa;
    style v115 fill:#e3dcea,stroke:#7a4baa;
    style v124 fill:#e3dcea,stroke:#7a4baa;
    style v134 fill:#e3dcea,stroke:#7a4baa;
    style v142 fill:#e3dcea,stroke:#7a4baa;
    style v149 fill:#e3dcea,stroke:#7a4baa;
    style v159 fill:#e3dcea,stroke:#7a4baa;
    style v166 fill:#e3dcea,stroke:#7a4baa;
    style v167 fill:#e3dcea,stroke:#7a4baa;
    style v175 fill:#e3dcea,stroke:#7a4baa;
    style v182 fill:#e3dcea,stroke:#7a4baa;
    style v192 fill:#e3dcea,stroke:#7a4baa;
    style v198 fill:#e3dcea,stroke:#7a4baa;
    style v228 fill:#e3dcea,stroke:#7a4baa;
    style v206 fill:#e3dcea,stroke:#7a4baa;
    style v213 fill:#e3dcea,stroke:#7a4baa;
    style v223 fill:#e3dcea,stroke:#7a4baa;
    style v235 fill:#e3dcea,stroke:#7a4baa;
    style v245 fill:#e3dcea,stroke:#7a4baa;
    style v254 fill:#e3dcea,stroke:#7a4baa;
    style v281 fill:#e3dcea,stroke:#7a4baa;
    style v259 fill:#e3dcea,stroke:#7a4baa;
    style v266 fill:#e3dcea,stroke:#7a4baa;
    style v276 fill:#e3dcea,stroke:#7a4baa;
    style v282 fill:#e3dcea,stroke:#7a4baa;
    style v290 fill:#e3dcea,stroke:#7a4baa;
    style v297 fill:#e3dcea,stroke:#7a4baa;
    style v307 fill:#e3dcea,stroke:#7a4baa;
    style v313 fill:#e3dcea,stroke:#7a4baa;
    style v321 fill:#e3dcea,stroke:#7a4baa;
    style v328 fill:#e3dcea,stroke:#7a4baa;
    style v338 fill:#e3dcea,stroke:#7a4baa;
    style v344 fill:#e3dcea,stroke:#7a4baa;
    style v374 fill:#e3dcea,stroke:#7a4baa;
    style v352 fill:#e3dcea,stroke:#7a4baa;
    style v359 fill:#e3dcea,stroke:#7a4baa;
    style v369 fill:#e3dcea,stroke:#7a4baa;
    style v381 fill:#e3dcea,stroke:#7a4baa;
    style v391 fill:#e3dcea,stroke:#7a4baa;
    style v593 fill:#e3dcea,stroke:#7a4baa;
    style v402 fill:#e3dcea,stroke:#7a4baa;
    style v410 fill:#e3dcea,stroke:#7a4baa;
    style v418 fill:#e3dcea,stroke:#7a4baa;
    style v425 fill:#e3dcea,stroke:#7a4baa;
    style v435 fill:#e3dcea,stroke:#7a4baa;
    style v441 fill:#e3dcea,stroke:#7a4baa;
    style v471 fill:#e3dcea,stroke:#7a4baa;
    style v449 fill:#e3dcea,stroke:#7a4baa;
    style v456 fill:#e3dcea,stroke:#7a4baa;
    style v466 fill:#e3dcea,stroke:#7a4baa;
    style v478 fill:#e3dcea,stroke:#7a4baa;
    style v488 fill:#e3dcea,stroke:#7a4baa;
    style v499 fill:#e3dcea,stroke:#7a4baa;
    style v507 fill:#e3dcea,stroke:#7a4baa;
    style v515 fill:#e3dcea,stroke:#7a4baa;
    style v522 fill:#e3dcea,stroke:#7a4baa;
    style v532 fill:#e3dcea,stroke:#7a4baa;
    style v538 fill:#e3dcea,stroke:#7a4baa;
    style v568 fill:#e3dcea,stroke:#7a4baa;
    style v546 fill:#e3dcea,stroke:#7a4baa;
    style v553 fill:#e3dcea,stroke:#7a4baa;
    style v563 fill:#e3dcea,stroke:#7a4baa;
    style v575 fill:#e3dcea,stroke:#7a4baa;
    style v585 fill:#e3dcea,stroke:#7a4baa;
    style v595 fill:#e3dcea,stroke:#7a4baa;
    style v602 fill:#e3dcea,stroke:#7a4baa;
    style v610 fill:#e3dcea,stroke:#7a4baa;
    style v617 fill:#e3dcea,stroke:#7a4baa;
    style v627 fill:#e3dcea,stroke:#7a4baa;
    style v636 fill:#e3dcea,stroke:#7a4baa;
    style v1689 fill:#e3dcea,stroke:#7a4baa;
    style v645 fill:#e3dcea,stroke:#7a4baa;
    style v656 fill:#e3dcea,stroke:#7a4baa;
    style v661 fill:#e3dcea,stroke:#7a4baa;
    style v668 fill:#e3dcea,stroke:#7a4baa;
    style v678 fill:#e3dcea,stroke:#7a4baa;
    style v688 fill:#e3dcea,stroke:#7a4baa;
    style v695 fill:#e3dcea,stroke:#7a4baa;
    style v705 fill:#e3dcea,stroke:#7a4baa;
    style v711 fill:#e3dcea,stroke:#7a4baa;
    style v719 fill:#e3dcea,stroke:#7a4baa;
    style v727 fill:#e3dcea,stroke:#7a4baa;
    style v735 fill:#e3dcea,stroke:#7a4baa;
    style v742 fill:#e3dcea,stroke:#7a4baa;
    style v752 fill:#e3dcea,stroke:#7a4baa;
    style v758 fill:#e3dcea,stroke:#7a4baa;
    style v766 fill:#e3dcea,stroke:#7a4baa;
    style v773 fill:#e3dcea,stroke:#7a4baa;
    style v783 fill:#e3dcea,stroke:#7a4baa;
    style v789 fill:#e3dcea,stroke:#7a4baa;
    style v797 fill:#e3dcea,stroke:#7a4baa;
    style v804 fill:#e3dcea,stroke:#7a4baa;
    style v814 fill:#e3dcea,stroke:#7a4baa;
    style v823 fill:#e3dcea,stroke:#7a4baa;
    style v850 fill:#e3dcea,stroke:#7a4baa;
    style v828 fill:#e3dcea,stroke:#7a4baa;
    style v835 fill:#e3dcea,stroke:#7a4baa;
    style v845 fill:#e3dcea,stroke:#7a4baa;
    style v851 fill:#e3dcea,stroke:#7a4baa;
    style v859 fill:#e3dcea,stroke:#7a4baa;
    style v866 fill:#e3dcea,stroke:#7a4baa;
    style v876 fill:#e3dcea,stroke:#7a4baa;
    style v882 fill:#e3dcea,stroke:#7a4baa;
    style v1008 fill:#e3dcea,stroke:#7a4baa;
    style v892 fill:#e3dcea,stroke:#7a4baa;
    style v900 fill:#e3dcea,stroke:#7a4baa;
    style v907 fill:#e3dcea,stroke:#7a4baa;
    style v917 fill:#e3dcea,stroke:#7a4baa;
    style v924 fill:#e3dcea,stroke:#7a4baa;
    style v925 fill:#e3dcea,stroke:#7a4baa;
    style v933 fill:#e3dcea,stroke:#7a4baa;
    style v940 fill:#e3dcea,stroke:#7a4baa;
    style v950 fill:#e3dcea,stroke:#7a4baa;
    style v956 fill:#e3dcea,stroke:#7a4baa;
    style v986 fill:#e3dcea,stroke:#7a4baa;
    style v964 fill:#e3dcea,stroke:#7a4baa;
    style v971 fill:#e3dcea,stroke:#7a4baa;
    style v981 fill:#e3dcea,stroke:#7a4baa;
    style v993 fill:#e3dcea,stroke:#7a4baa;
    style v1003 fill:#e3dcea,stroke:#7a4baa;
    style v1015 fill:#e3dcea,stroke:#7a4baa;
    style v1025 fill:#e3dcea,stroke:#7a4baa;
    style v1226 fill:#e3dcea,stroke:#7a4baa;
    style v1036 fill:#e3dcea,stroke:#7a4baa;
    style v1044 fill:#e3dcea,stroke:#7a4baa;
    style v1052 fill:#e3dcea,stroke:#7a4baa;
    style v1059 fill:#e3dcea,stroke:#7a4baa;
    style v1069 fill:#e3dcea,stroke:#7a4baa;
    style v1075 fill:#e3dcea,stroke:#7a4baa;
    style v1201 fill:#e3dcea,stroke:#7a4baa;
    style v1085 fill:#e3dcea,stroke:#7a4baa;
    style v1093 fill:#e3dcea,stroke:#7a4baa;
    style v1100 fill:#e3dcea,stroke:#7a4baa;
    style v1110 fill:#e3dcea,stroke:#7a4baa;
    style v1117 fill:#e3dcea,stroke:#7a4baa;
    style v1118 fill:#e3dcea,stroke:#7a4baa;
    style v1126 fill:#e3dcea,stroke:#7a4baa;
    style v1133 fill:#e3dcea,stroke:#7a4baa;
    style v1143 fill:#e3dcea,stroke:#7a4baa;
    style v1149 fill:#e3dcea,stroke:#7a4baa;
    style v1179 fill:#e3dcea,stroke:#7a4baa;
    style v1157 fill:#e3dcea,stroke:#7a4baa;
    style v1164 fill:#e3dcea,stroke:#7a4baa;
    style v1174 fill:#e3dcea,stroke:#7a4baa;
    style v1186 fill:#e3dcea,stroke:#7a4baa;
    style v1196 fill:#e3dcea,stroke:#7a4baa;
    style v1208 fill:#e3dcea,stroke:#7a4baa;
    style v1218 fill:#e3dcea,stroke:#7a4baa;
    style v1228 fill:#e3dcea,stroke:#7a4baa;
    style v1236 fill:#e3dcea,stroke:#7a4baa;
    style v1244 fill:#e3dcea,stroke:#7a4baa;
    style v1251 fill:#e3dcea,stroke:#7a4baa;
    style v1261 fill:#e3dcea,stroke:#7a4baa;
    style v1271 fill:#e3dcea,stroke:#7a4baa;
    style v1390 fill:#e3dcea,stroke:#7a4baa;
    style v1276 fill:#e3dcea,stroke:#7a4baa;
    style v1284 fill:#e3dcea,stroke:#7a4baa;
    style v1291 fill:#e3dcea,stroke:#7a4baa;
    style v1301 fill:#e3dcea,stroke:#7a4baa;
    style v1307 fill:#e3dcea,stroke:#7a4baa;
    style v1315 fill:#e3dcea,stroke:#7a4baa;
    style v1322 fill:#e3dcea,stroke:#7a4baa;
    style v1332 fill:#e3dcea,stroke:#7a4baa;
    style v1338 fill:#e3dcea,stroke:#7a4baa;
    style v1368 fill:#e3dcea,stroke:#7a4baa;
    style v1346 fill:#e3dcea,stroke:#7a4baa;
    style v1353 fill:#e3dcea,stroke:#7a4baa;
    style v1363 fill:#e3dcea,stroke:#7a4baa;
    style v1375 fill:#e3dcea,stroke:#7a4baa;
    style v1385 fill:#e3dcea,stroke:#7a4baa;
    style v1394 fill:#e3dcea,stroke:#7a4baa;
    style v1513 fill:#e3dcea,stroke:#7a4baa;
    style v1399 fill:#e3dcea,stroke:#7a4baa;
    style v1407 fill:#e3dcea,stroke:#7a4baa;
    style v1414 fill:#e3dcea,stroke:#7a4baa;
    style v1424 fill:#e3dcea,stroke:#7a4baa;
    style v1430 fill:#e3dcea,stroke:#7a4baa;
    style v1438 fill:#e3dcea,stroke:#7a4baa;
    style v1445 fill:#e3dcea,stroke:#7a4baa;
    style v1455 fill:#e3dcea,stroke:#7a4baa;
    style v1461 fill:#e3dcea,stroke:#7a4baa;
    style v1491 fill:#e3dcea,stroke:#7a4baa;
    style v1469 fill:#e3dcea,stroke:#7a4baa;
    style v1476 fill:#e3dcea,stroke:#7a4baa;
    style v1486 fill:#e3dcea,stroke:#7a4baa;
    style v1498 fill:#e3dcea,stroke:#7a4baa;
    style v1508 fill:#e3dcea,stroke:#7a4baa;
    style v1517 fill:#e3dcea,stroke:#7a4baa;
    style v1636 fill:#e3dcea,stroke:#7a4baa;
    style v1522 fill:#e3dcea,stroke:#7a4baa;
    style v1530 fill:#e3dcea,stroke:#7a4baa;
    style v1537 fill:#e3dcea,stroke:#7a4baa;
    style v1547 fill:#e3dcea,stroke:#7a4baa;
    style v1553 fill:#e3dcea,stroke:#7a4baa;
    style v1561 fill:#e3dcea,stroke:#7a4baa;
    style v1568 fill:#e3dcea,stroke:#7a4baa;
    style v1578 fill:#e3dcea,stroke:#7a4baa;
    style v1584 fill:#e3dcea,stroke:#7a4baa;
    style v1614 fill:#e3dcea,stroke:#7a4baa;
    style v1592 fill:#e3dcea,stroke:#7a4baa;
    style v1599 fill:#e3dcea,stroke:#7a4baa;
    style v1609 fill:#e3dcea,stroke:#7a4baa;
    style v1621 fill:#e3dcea,stroke:#7a4baa;
    style v1631 fill:#e3dcea,stroke:#7a4baa;
    style v1637 fill:#e3dcea,stroke:#7a4baa;
    style v1667 fill:#e3dcea,stroke:#7a4baa;
    style v1645 fill:#e3dcea,stroke:#7a4baa;
    style v1652 fill:#e3dcea,stroke:#7a4baa;
    style v1662 fill:#e3dcea,stroke:#7a4baa;
    style v1674 fill:#e3dcea,stroke:#7a4baa;
    style v1684 fill:#e3dcea,stroke:#7a4baa;
    style v1696 fill:#e3dcea,stroke:#7a4baa;
    style v1703 fill:#e3dcea,stroke:#7a4baa;
    style v1715 fill:#e3dcea,stroke:#7a4baa;
    style v1722 fill:#e3dcea,stroke:#7a4baa;
    style v1726 fill:#e3dcea,stroke:#7a4baa;

```

