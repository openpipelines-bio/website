---
title: "Prot multisample"
namespace: "Workflows/prot"
description: "Processing unimodal multi-sample ADT data."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `prot_multisample`  
Namespace: `workflows/prot`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/2.0.1/src/workflows/prot/prot_multisample/config.vsh.yaml){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 2.0.1 -latest \
  -main-script target/nextflow/workflows/prot/prot_multisample/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Inputs
id: # please fill in - example: "concatenated"
input: # please fill in - example: "dataset.h5mu"
# layer: "foo"

# Outputs
# output: "$id.$key.output.h5mu"

# QC metrics calculation options
# var_qc_metrics: ["ercc,highly_variable"]
top_n_vars: [50, 100, 200, 500]
output_obs_num_nonzero_vars: "num_nonzero_vars"
output_obs_total_counts_vars: "total_counts"
output_var_num_nonzero_obs: "num_nonzero_obs"
output_var_total_counts_obs: "total_counts"
output_var_obs_mean: "obs_mean"
output_var_pct_dropout: "pct_dropout"

# CLR arguments
clr_axis: 0

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"

# Arguments
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 2.0.1 -latest \
  -profile docker \
  -main-script target/nextflow/workflows/prot/prot_multisample/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Inputs

|Name      |Description                                       |Attributes                                    |
|:----------|:--------------------------------------------------|:--------------------|
|`--id`    |ID of the concatenated file                       |`string`, required, example: `"concatenated"` |
|`--input` |Path to the samples.                              |`file`, required, example: `"dataset.h5mu"`   |
|`--layer` |Input layer to use. If not specified, .X is used. |`string`                                      |


### Outputs

|Name       |Description                     |Attributes                                 |
|:----------|:--------------------------------------------------|:--------------------|
|`--output` |Destination path to the output. |`file`, required, example: `"output.h5mu"` |


### QC metrics calculation options

|Name                             |Description                                                                                                                                                                                                                                                                               |Attributes                                                               |
|:----------|:--------------------------------------------------|:--------------------|
|`--var_qc_metrics`               |Keys to select a boolean (containing only True or False) column from .var. For each cell, calculate the proportion of total values for genes which are labeled 'True',  compared to the total sum of the values for all genes. Defaults to the value from --var_name_mitochondrial_genes. |List of `string`, example: `"ercc,highly_variable"`, multiple_sep: `","` |
|`--top_n_vars`                   |Number of top vars to be used to calculate cumulative proportions. If not specified, proportions are not calculated. `--top_n_vars 20,50` finds cumulative proportion to the 20th and 50th most expressed vars.                                                                           |List of `integer`, default: `50, 100, 200, 500`, multiple_sep: `","`     |
|`--output_obs_num_nonzero_vars`  |Name of column in .obs describing, for each observation, the number of stored values (including explicit zeroes). In other words, the name of the column that counts for each row the number of columns that contain data.                                                                |`string`, default: `"num_nonzero_vars"`                                  |
|`--output_obs_total_counts_vars` |Name of the column for .obs describing, for each observation (row), the sum of the stored values in the columns.                                                                                                                                                                          |`string`, default: `"total_counts"`                                      |
|`--output_var_num_nonzero_obs`   |Name of column describing, for each feature, the number of stored values (including explicit zeroes). In other words, the name of the column that counts for each column the number of rows that contain data.                                                                            |`string`, default: `"num_nonzero_obs"`                                   |
|`--output_var_total_counts_obs`  |Name of the column in .var describing, for each feature (column), the sum of the stored values in the rows.                                                                                                                                                                               |`string`, default: `"total_counts"`                                      |
|`--output_var_obs_mean`          |Name of the column in .obs providing the mean of the values in each row.                                                                                                                                                                                                                  |`string`, default: `"obs_mean"`                                          |
|`--output_var_pct_dropout`       |Name of the column in .obs providing for each feature the percentage of observations the feature does not appear on (i.e. is missing). Same as `--output_var_num_nonzero_obs` but percentage based.                                                                                       |`string`, default: `"pct_dropout"`                                       |


### CLR arguments

|Name         |Description                         |Attributes              |
|:----------|:--------------------------------------------------|:--------------------|
|`--clr_axis` |Axis across which CLR is performed. |`integer`, default: `0` |

## Authors


  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author)

## Visualisation

```{mermaid}
flowchart TB
    v0(Channel.fromList)
    v2(filter)
    v10(filter)
    v18(clr)
    v25(cross)
    v35(cross)
    v41(filter)
    v167(concat)
    v51(filter)
    v66(cross)
    v76(cross)
    v83(mix)
    v84(filter)
    v99(cross)
    v109(cross)
    v115(filter)
    v145(concat)
    v130(cross)
    v140(cross)
    v152(cross)
    v162(cross)
    v174(cross)
    v181(cross)
    v193(cross)
    v200(cross)
    v204(Output)
    subgraph group_prot_qc [prot_qc]
        v59(grep_annotation_column)
        v92(calculate_qc_metrics)
        v123(publish)
    end
    v83-->v84
    v0-->v2
    v2-->v10
    v10-->v18
    v18-->v25
    v10-->v25
    v10-->v35
    v51-->v59
    v59-->v66
    v51-->v66
    v51-->v76
    v84-->v92
    v92-->v99
    v84-->v99
    v84-->v109
    v115-->v123
    v123-->v130
    v115-->v130
    v115-->v140
    v140-->v145
    v145-->v152
    v41-->v152
    v41-->v162
    v162-->v167
    v167-->v174
    v2-->v174
    v174-->v181
    v2-->v181
    v2-->v193
    v193-->v200
    v2-->v200
    v200-->v204
    v35-->v41
    v18-->v35
    v41-->v51
    v76-->v83
    v59-->v76
    v41-->v83
    v109-->v115
    v92-->v109
    v123-->v140
    v145-->v162
    v167-->v193
    style group_prot_qc fill:#F0F0F0,stroke:#969696;
    style v0 fill:#e3dcea,stroke:#7a4baa;
    style v2 fill:#e3dcea,stroke:#7a4baa;
    style v10 fill:#e3dcea,stroke:#7a4baa;
    style v18 fill:#e3dcea,stroke:#7a4baa;
    style v25 fill:#e3dcea,stroke:#7a4baa;
    style v35 fill:#e3dcea,stroke:#7a4baa;
    style v41 fill:#e3dcea,stroke:#7a4baa;
    style v167 fill:#e3dcea,stroke:#7a4baa;
    style v51 fill:#e3dcea,stroke:#7a4baa;
    style v59 fill:#e3dcea,stroke:#7a4baa;
    style v66 fill:#e3dcea,stroke:#7a4baa;
    style v76 fill:#e3dcea,stroke:#7a4baa;
    style v83 fill:#e3dcea,stroke:#7a4baa;
    style v84 fill:#e3dcea,stroke:#7a4baa;
    style v92 fill:#e3dcea,stroke:#7a4baa;
    style v99 fill:#e3dcea,stroke:#7a4baa;
    style v109 fill:#e3dcea,stroke:#7a4baa;
    style v115 fill:#e3dcea,stroke:#7a4baa;
    style v145 fill:#e3dcea,stroke:#7a4baa;
    style v123 fill:#e3dcea,stroke:#7a4baa;
    style v130 fill:#e3dcea,stroke:#7a4baa;
    style v140 fill:#e3dcea,stroke:#7a4baa;
    style v152 fill:#e3dcea,stroke:#7a4baa;
    style v162 fill:#e3dcea,stroke:#7a4baa;
    style v174 fill:#e3dcea,stroke:#7a4baa;
    style v181 fill:#e3dcea,stroke:#7a4baa;
    style v193 fill:#e3dcea,stroke:#7a4baa;
    style v200 fill:#e3dcea,stroke:#7a4baa;
    style v204 fill:#e3dcea,stroke:#7a4baa;

```

