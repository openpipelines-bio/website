---
title: "Gdo singlesample"
namespace: "Workflows/gdo"
description: "Processing unimodal single-sample guide-derived oligonucleotide (GDO) data."
type: "workflow"
toc: false
---

::: {.column-margin}

### Info

ID: `gdo_singlesample`  
Namespace: `workflows/gdo`

### Links
[Source](https://github.com/openpipelines-bio/openpipeline/blob/1.0.5/src/workflows/gdo/gdo_singlesample/config.vsh.yaml){.btn-action .btn-sm .btn-info .btn role="button"}

:::



## Example commands

You can run the pipeline using `nextflow run`.

### View help

You can use `--help` as a parameter to get an overview of the possible parameters.

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 1.0.5 -latest \
  -main-script target/nextflow/workflows/gdo/gdo_singlesample/main.nf \
  --help
```

### Run command

<details>
<summary>Example of `params.yaml`</summary>
```yaml
# Input
id: # please fill in - example: "foo"
input: # please fill in - example: "dataset.h5mu"
# layer: "foo"

# Output
# output: "$id.$key.output.h5mu"

# Filtering options
# min_counts: 200
# max_counts: 5000000
# min_guides_per_cell: 200
# max_guides_per_cell: 1500000
# min_cells_per_guide: 3

# Nextflow input-output arguments
publish_dir: # please fill in - example: "output/"
# param_list: "my_params.yaml"
```
</details>

```bash
nextflow run openpipelines-bio/openpipeline \
  -r 1.0.5 -latest \
  -profile docker \
  -main-script target/nextflow/workflows/gdo/gdo_singlesample/main.nf \
  -params-file params.yaml
```

:::{.callout-note}
Replace `-profile docker` with `-profile podman` or `-profile singularity` depending on the desired backend.
:::

## Argument groups

### Input

|Name      |Description                                             |Attributes                                  |
|:----------|:--------------------------------------------------|:--------------------|
|`--id`    |ID of the sample.                                       |`string`, required, example: `"foo"`        |
|`--input` |Path to the sample.                                     |`file`, required, example: `"dataset.h5mu"` |
|`--layer` |Input layer to start from. By default, .X will be used. |`string`                                    |


### Output

|Name       |Description                     |Attributes                                 |
|:----------|:--------------------------------------------------|:--------------------|
|`--output` |Destination path to the output. |`file`, required, example: `"output.h5mu"` |


### Filtering options

|Name                    |Description                                 |Attributes                    |
|:----------|:--------------------------------------------------|:--------------------|
|`--min_counts`          |Minimum number of counts captured per cell. |`integer`, example: `200`     |
|`--max_counts`          |Maximum number of counts captured per cell. |`integer`, example: `5000000` |
|`--min_guides_per_cell` |Minimum of non-zero values per cell.        |`integer`, example: `200`     |
|`--max_guides_per_cell` |Maximum of non-zero values per cell.        |`integer`, example: `1500000` |
|`--min_cells_per_guide` |Minimum of non-zero values per gene.        |`integer`, example: `3`       |

## Authors


  * Dries Schaumont [{{< fa brands github >}}](https://github.com/DriesSchaumont) [{{< fa brands orcid >}}](https://orcid.org/0000-0002-4389-0440) [{{< fa brands linkedin >}}](https://linkedin.com/in/dries-schaumont) (author)

## Visualisation

```{mermaid}
flowchart TB
    v0(Channel.fromList)
    v18(gdo_filter_with_counts)
    v38(gdo_do_filter)
    v66(Output)
    v0-->v18
    v18-->v38
    v38-->v66
    style v0 fill:#e3dcea,stroke:#7a4baa;
    style v18 fill:#e3dcea,stroke:#7a4baa;
    style v38 fill:#e3dcea,stroke:#7a4baa;
    style v66 fill:#e3dcea,stroke:#7a4baa;

```

